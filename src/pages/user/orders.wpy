<style lang="css">
  @import '../../zanui/panel.wxss';
  @import '../../zanui/btn.wxss';
  @import '../../zanui/cell.wxss';
  .field__title--radius {
    padding-bottom: 10px;
  }
  .zan-field__input {
    margin-left:2px;
  }
</style>

<template>
  <!-- 表单填写-->
  <form bindsubmit="formsubmit" bindreset="formReset">
    <view class="zan-panel">

      <view class="zan-cell zan-field">
        <view class="zan-cell__hd zan-field__title"><view style="color:red;display:inline-block;margin-right:2px;">*</view>联系人</view>
        <input
          type="text"
          name="name"
          placeholder="请输入联系人姓名"
          class="zan-field__input zan-cell__bd"/>
      </view>


      <view class="zan-cell zan-field">
        <view class="zan-cell__hd zan-field__title"><view style="color:red;display:inline-block;margin-right:2px;">*</view>号码</view>
        <input
          type="number"
          name="phone"
          maxlength="11"
          placeholder="请输入联系号码"
          class="zan-field__input zan-cell__bd"/>
      </view>

      <view class="zan-cell zan-field">
        <view class="zan-cell__hd zan-field__title"><view style="color:red;display:inline-block;margin-right:2px;">*</view>邮箱</view>
        <input
          type="text"
          name="email"
          placeholder="请输入邮箱地址"
          class="zan-field__input zan-cell__bd"/>
      </view>


      <view class="zan-cell zan-field">
        <view class="zan-cell__hd zan-field__title"><view style="color:red;display:inline-block;margin-right:2px;">*</view>提供产品名称</view>
        <textarea name="desc" class="zan-field__input zan-cell__bd" maxlength="2000" style="height:200px;" placeholder="请输入您的提供产品名称详情" />
      </view>

      <view class="zan-btns">
        <button
          class="zan-btn zan-btn--primary"
          formType="submit">提交</button>
      </view>
    </view>
  </form>
  <!--Toast 显示 -->
  <zanToast></zanToast>
</template>

<script>
  import wepy from 'wepy'
  import zanToast from '../../components/zan-toast'

  import AV from '../../libs/av-weapp-min'
  export default class Orders  extends wepy.page {
    config = {
      navigationBarTitleText: '对接信息'
    }

    data = {
      item:null,
      demandItem: null,
    }

    components = {
      zanToast: zanToast
    }

    methods = {
      formsubmit(event) {
        // 提醒用户必填的需要填写;
        let publishForm = {
          ...event.detail.value
        };
        const message = {
          name:'联系人不能为空',
          phone:'手机号码不能为空',
          desc:'提供产品不能为空',
          email: '邮箱不能为空'
        }
        // 循环出当前的数据;
        const self = this;
        let isSubmit = true;
        Object.keys(publishForm).forEach(item=> {
          if (publishForm[item] == '') {
            isSubmit = false;
            self.$invoke('zanToast', 'showZanToast', {
              title: message[item],
              timeout: 2000
            })

            return ;
          }
          // 在需求列表中新建立这个表单;
        })
        // 需要验证是否为11 位的电话号码
        var phoneReg=/^[1][3,4,5,7,8][0-9]{9}$/;
        if (!phoneReg.test(publishForm['phone'].val())) {
          isSubmit = false;
          self.$invoke('zanToast', 'showZanToast', {
            title: '手机号码格式不对',
            timeout: 2000
          })
          return false;
        }

        var EmailReg = new RegExp("^[a-z0-9]+([._\\-]*[a-z0-9])*@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]+$"); //正
        // 需要验证是否为合格的邮箱地址;
        if (!EmailReg.test(publishForm['email'].val())) {
          isSubmit = false;
          self.$invoke('zanToast', 'showZanToast', {
            title: '邮箱格式不对',
            timeout: 2000
          })
          return false;
        }

        if(isSubmit) {
          wx.showLoading({
            title: '操作中',
            mask: true
          });
          // 用户添加的数据保存 ;
          const currentUser = AV.User.current();

          var docker = new AV.Object('Docker');
          docker.set('email', publishForm['email']);
          docker.set('name',publishForm['desc']);
          docker.set('phone', publishForm['phone']);
          docker.set('desc', publishForm['desc']);
          docker.set('user', currentUser);

          const demandItem = self.demandItem;
          // 项目的标题
          const title = demandItem.get('title');

          docker.set('publishItem', demandItem);
          docker.save().then(res=> {
            // 开始转跳到自己的需求发布管理;
            // 回到上一页面即可;
            // 发送一条消息给当前的item的用户;
            var MessageList = AV.Object.extend('MessageList');
            var messageList = new MessageList();
            messageList.set('title','收到对接');
            messageList.set('type','收到对接');
            messageList.set('desc','你发布的需求'+ title+'有人对接，请点击查看详情');
            messageList.set('status',false);

            messageList.set('user', self.userItem);
            messageList.set('docker', res);
            messageList.save().then(res=> {
              wx.hideLoading();
              wx.navigateBack();
            }, error=> {
              wx.hideLoading();
            });
          }, error=> {
            wx.hideLoading();
          });
        }

      }
    }
    onLoad(options) {
      console.log(options);
      this.item = options.id;
      const self = this;
      const demandItem = AV.Object.createWithoutData('Demand', this.item);
      this.demandItem = demandItem;
      demandItem.fetch().then(function() {
        var user = demandItem.get('user');
        self.userItem = user;
      });
    }
  }
</script>
